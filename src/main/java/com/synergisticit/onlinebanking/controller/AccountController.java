package com.synergisticit.onlinebanking.controller;


import java.util.List;

import javax.mail.MessagingException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;

import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.lowagie.text.DocumentException;
import com.synergisticit.onlinebanking.domain.Account;

import com.synergisticit.onlinebanking.service.AccountService;
import com.synergisticit.onlinebanking.service.MailService;
import com.synergisticit.onlinebanking.service.UserService;
import com.synergisticit.onlinebanking.validation.AccountValidator;

@Controller
public class AccountController {
	
	
	@Autowired
	@Qualifier(value="accountServiceJpa")
	AccountService accountService;

	
	@Autowired
	AccountValidator accountValidator;
	
	@Autowired   //autowiring based on the user details it get downloaded
	UserService userService;

	@Autowired
	MailService mailService;
	
	@InitBinder
	public void initBinder(WebDataBinder binder)
	{
		binder.addValidators(accountValidator);
	}
	
	//HTML informations are grab by using @ModelAttribute.
	@RequestMapping(value="/saveaccount",method=RequestMethod.POST)
	public String saveAccount(@Valid @ModelAttribute ("account")Account acc,BindingResult result ){
		//System.out.println("%%%%%%%"+branch);
		//accountValidator.validate(acc, result);
	
		System.out.println("result.hasErrors()"+result.hasErrors());
		if(result.hasErrors()){
			
			System.out.println("return accountform.jsp");
			if(accountService.exists(acc.getAccno())){
				result.addError(new ObjectError("accno","the account number"+acc.getAccno()+"  already exists."));
			
			}
			return "accountform";
		}
		else
		{
			  
			accountService.save(acc);
			System.out.println("success"+result.hasErrors());
			System.out.println("MAIL SERVICE");
			//String subject = "Account Created this is your Account number"+acc.getAccno();
			//String body = "This is Autogenerated mail Please don't reply to this mail id";
			//String mailTo = "synergisticitsessionusc11@gmail.com";
			//mailService.sendMail(mailTo, subject, body);
			return "success";
		}
			
	/*	Transaction tx=new Transaction();
		tx.setTxdate(new Date(System.currentTimeMillis()));
		
		tx.setComments("new account"+acc.getAccno()+","+acc.getAccholdername()+","+acc.getAccBalance()+","+acc.getAccType());
		transactionService.save(tx);
		
		return "success";*/
		
	}
	@RequestMapping(value="/createaccount",method=RequestMethod.GET)
	public String accountForm(Account acc){
		return "accountform";
		
	}
	
//	@GetMapping(value="/createAccount")
//	public String accountForm(Account account,Model model) {
//		List<String> accountTypes = new ArrayList<>();
//		accountTypes.add("Checkings");
//		accountTypes.add("Savings");
//		accountTypes.add("Transactional");
//		accountTypes.add("Dividend");
//		accountTypes.add("CD (Certificate of Deposit)");
//		accountTypes.add("Individual Retirement Account");
//		model.addAttribute("AccountTypes",accountTypes);
//		return "accountForm";
//	}
	
	/*	public String viewAllDownload(Model model){
		model.addAttribute("account",accountService.findAllAccount());
		return "accountListPdf";
	}*/
	
	
	@GetMapping(value="/viewAllAccounts/{format}")
	
	public ModelAndView viewAllAccounts(@PathVariable String format) {
		List<Account> accountList = accountService.findAllAccount();
		if(format.equals("normal")) {
			return new ModelAndView("findAllAccount", "accountList", accountList);
		}
		else if(format.equals("pdf")) {
			System.out.println("$$$$ from pdf file" +accountList);
			return new ModelAndView("accountPdfView", "accountList", accountList);
		}
		else if(format.equals("csv")) {
			//System.out.println("######## from csv"  +accountList);
			return new ModelAndView("accountCsvView", "accountList", accountList);
		}
		else if(format.equals("excel")) {
			System.out.println("@@@@@@@@ from excel page"  +accountList);
			return new ModelAndView("accountExcelView", "accountList", accountList);
		}
		return new ModelAndView("accountPdfView", "accountList", accountList);
	}
	
	@GetMapping(value="/sendMail")
	public String sendingMailForm(Account account) throws MessagingException, DocumentException {
		String subject = "testing mail Service";
		String body = "testing Mail Service";
		String mailTo = "synergisticitsessionusc11@gmail.com";
		mailService.sendMail(mailTo, subject, body,account);
		return "success";
	}
	
	@GetMapping(value="/account/{format}")
	
	public ModelAndView findAccount(@PathVariable String format) {
		System.out.println("$$$$$$$$$ from list account");
		List<Account> accountList = accountService.findAllAccount();
		System.out.println("^^^^^^^^^^^^ listing the account"+accountList);
		return new ModelAndView("accountList", "accountList", accountList);
	}
	
@GetMapping(value="/downloadPdf")
	
	public ModelAndView downloadPdf() {
		System.out.println("$$$$$$$$$ from list account");
		List<Account> accountList = accountService.findAllAccount();
		System.out.println("^^^^^^^^^^^^ listing the account"+accountList);
		return accountService.downloadPdf();
	}
}


