package com.synergisticit.onlinebanking.controller;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.mail.MessagingException;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.lowagie.text.DocumentException;
import com.synergisticit.onlinebanking.domain.Transaction;
import com.synergisticit.onlinebanking.service.MailService;
//import com.synergisticit.onlinebanking.service.AccountServiceImpl;
import com.synergisticit.onlinebanking.service.TransactionService;
import com.synergisticit.onlinebanking.validation.TransactionValidator;


@Controller
public class TransactionController {
	

	@Autowired
	MailService mailService;
	
	@Autowired
	TransactionService transactionService;
	@Autowired
	TransactionValidator transactionValidator;
	
	@InitBinder
	public void initBinder(WebDataBinder binder)
	{
		binder.addValidators(transactionValidator);
	}

	//____________Transfer Between Accounts_______________//
	
	@RequestMapping(value="/transamt",method=RequestMethod.GET)
	public String transfersave(Transaction transaction){
		return "transfer";
	}
	
	@RequestMapping(value="/savetrans",method=RequestMethod.POST)
	public String savetransfer(@Valid @ModelAttribute("transaction") Transaction transaction,BindingResult result) throws MessagingException, DocumentException
	{
		System.out.println("VALIDATION FOR TRANSFERING AMOUNT");
		if(transaction.getAmounttx()<300){
			System.out.println("back to jsp page");
			result.rejectValue("amounttx", "transaction.amounttx.value", "transfer amount should be greater than 300");
			return "transfer";
		}else{
		transactionService.transferamount(transaction.getAmounttx(),transaction.getFromAccount(),transaction.getToAccount());
//		String subject = "Amount transfered from your account"+transaction.getId()+transaction.getAmounttx();
//		String body = "This is Autogenerated mail Please don't reply to this mail id";
//		String mailTo = "synergisticitsessionusc11@gmail.com";
//		//mailService.sendMail(mailTo, subject, body,transaction);
		return "amttransfersaved";
		}
	}
	
	//_________________DEPOSIT AMOUNT__________________//
	//PreAuthorize,@PostAuthorized->works and entering into the method and @secured are used for method level security
	//TWO WAYS TO DO 1)METHOD LEVEL 2)JSP PAGE 
	//@PreAuthorize("hasRole('ROLE_ADMIN')")
	@GetMapping(value="/depositform")
	public String depositform(@ModelAttribute("transaction")Transaction transaction)
	{
		
		return "deposit";
	}
	
	//@PreAuthorize("hasRole('ROLE_ADMIN')")
	@PostMapping(value="/savedeposit")
	public String savedeposit(@Valid @ModelAttribute("transaction") Transaction transaction ,BindingResult result)
	{
		System.out.println("HEREEEEEE");
			if(transaction.getDepositamt()<100){
			System.out.println("back to jsp page");
			result.rejectValue("depositamt", "transaction.depositamt.value", "deposit amount should be greater than 100");
			return "deposit";
		}
		else{
			transactionService.deposit(transaction.getDepositamt(), transaction.getFromAccount(),transaction.getToAccount());
			return "success";
		}
		
	}
	
	
	//_________________WITHDRAW FROM ACCOUNT___________________________//
	//@Secured("hasRole('ROLE_ADMIN')")
	@RequestMapping(value="/withdrawform",method=RequestMethod.GET)
	//public String withdrawform(Transaction transaction,@SessionAttribute("user") User user){
		public String withdrawform(Transaction transaction){
		
		return "withdraw";
	}
	
	@RequestMapping(value="/savewithdrawform",method=RequestMethod.POST)
	public String savewithdrawamt(@Valid @ModelAttribute("transaction") Transaction transaction,BindingResult result)
	{
		System.out.println("WITHDRAW VALIDATION");
		if(transaction.getWithdrawamt()<200){
			System.out.println("return back to withdraw form");
			result.rejectValue("withdrawamt", "transaction.withdrawamt.value", "withdraw amount should be greater than 200");
			return "withdraw";
		}else{
			transactionService.withdraw(transaction.getWithdrawamt(), transaction.getFromAccount(), transaction.getToAccount());
			return "success";
		}
	}
	
	@RequestMapping(value="/accessDenied",method=RequestMethod.GET)
	public String accessdenied(Model model){
		return "accessdenied";
	}

	
	
}
